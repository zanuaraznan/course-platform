datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

generator client {
    provider = "prisma-client-js"
}

model Account {
    id                String  @id @default(cuid())
    userId            String  @map("user_id")
    type              String
    provider          String
    providerAccountId String  @map("provider_account_id")
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@map("accounts")
}

enum UserRole {
    USER
    ADMIN
}

model User {
    id                 String               @id @default(cuid())
    name               String?
    email              String?              @unique
    password           String?
    role               UserRole             @default(USER)
    emailVerified      DateTime?            @map("email_verified")
    image              String?
    accounts           Account[]
    createdAt          DateTime             @default(now())
    updatedAt          DateTime             @updatedAt
    deletedAt          DateTime?
    Purchase           Purchase[]
    UserLessonComplete UserLessonComplete[]
    UserCourseAccess   UserCourseAccess[]

    @@map("users")
}

enum ProductStatus {
    PUBLIC
    PRIVATE

    @@map("product_status")
}

model Course {
    id               String             @id @default(cuid())
    name             String
    description      String?            @db.Text
    createdAt        DateTime           @default(now())
    updatedAt        DateTime           @updatedAt
    CourseProducts   CourseProducts[]
    CourseSection    CourseSection[]
    UserCourseAccess UserCourseAccess[]

    @@map("courses")
}

model UserCourseAccess {
    id        String   @id @default(cuid())
    userId    String   @map("user_id")
    courseId  String   @map("course_id")
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
    course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

    @@unique([userId, courseId])
    @@map("user_course_access")
}

model Product {
    id             String           @id @default(cuid())
    name           String
    description    String
    priceInRupiah  Int              @map("price_in_rupiah")
    imageUrl       String           @map("image_url")
    status         ProductStatus    @default(PRIVATE)
    createdAt      DateTime         @default(now())
    updatedAt      DateTime         @updatedAt
    CourseProducts CourseProducts[]
    Purchase       Purchase[]
    purchaseId     String

    @@map("products")
}

model CourseProducts {
    courseId  String   @map("course_id")
    productId String   @map("product_id")
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    course    Course   @relation(fields: [courseId], references: [id], onDelete: Restrict)
    product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

    @@id([courseId, productId])
    @@map("course_products")
}

enum CourseSectionStatus {
    PUBLIC
    PRIVATE

    @@map("course_section_status")
}

model CourseSection {
    id        String              @id @default(cuid())
    courseId  String              @map("course_id")
    name      String
    status    CourseSectionStatus @default(PRIVATE)
    order     Int
    createdAt DateTime            @default(now())
    updatedAt DateTime            @updatedAt

    course Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
    Lesson Lesson[]

    @@map("course_sections")
}

enum LessonStatuses {
    PUBLIC
    PRIVATE
    PREVIEW

    @@map("lesson_status")
}

model Lesson {
    id             String         @id @default(cuid())
    sectionId      String         @map("section_id")
    name           String
    description    String?        @db.Text
    youtubeVideoId String         @map("youtube_video_id")
    order          Int
    status         LessonStatuses @default(PRIVATE)
    createdAt      DateTime       @default(now())
    updatedAt      DateTime       @updatedAt

    section            CourseSection        @relation(fields: [sectionId], references: [id], onDelete: Cascade)
    UserLessonComplete UserLessonComplete[]

    @@map("lessons")
}

model Purchase {
    id              String    @id @default(cuid())
    priceInRupiah   Int       @map("price_in_rupiah")
    productDetails  Json      @map("product_details") @db.JsonB
    userId          String    @map("user_id")
    productId       String    @map("product_id")
    stripeSessionId String    @unique @map("stripe_session_id")
    refundedAt      DateTime?
    createdAt       DateTime  @default(now())
    updatedAt       DateTime  @updatedAt

    user    User    @relation(fields: [userId], references: [id], onDelete: Restrict)
    product Product @relation(fields: [productId], references: [id], onDelete: Restrict)

    @@map("purchases")
}

model UserLessonComplete {
    userId    String
    lessonId  String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
    lesson Lesson @relation(fields: [lessonId], references: [id], onDelete: Cascade)

    @@id([userId, lessonId])
    @@map("user_lesson_complete")
}
